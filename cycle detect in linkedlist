
#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
    Node(int val) {
        data = val;
        next = NULL;
    }
};

// Function to detect cycle using Floyd's algorithm
bool hasCycle(Node* head) {
    if (head == NULL || head->next == NULL) return false;

    Node* slow = head;
    Node* fast = head;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;          // move by 1
        fast = fast->next->next;    // move by 2

        if (slow == fast) {
            return true; // cycle detected
        }
    }
    return false; // no cycle
}

int main() {
    // Create linked list: 1 -> 2 -> 3 -> 4
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(3);
    head->next->next->next = new Node(4);

    // Uncomment below line to create a cycle (4 -> 2)
    head->next->next->next->next = head->next;

    if (hasCycle(head)) {
        cout << "Cycle detected!" << endl;
    } else {
        cout << "No cycle." << endl;
    }

    return 0;
}
